version: '2.2'
services:

    # DB
    postgres:
        image: postgres:latest
        container_name: postgres
        environment:
        - POSTGRES_USER=admin
        - POSTGRES_PASSWORD=admin
        - PGDATA=/var/lib/postgresql/data/pgdata
        # volumes:
        # - ./volumes/pg_data:/var/lib/postgresql/data
        ports:
        - 6543:5432
        networks:
        - local-net

    # BUS
    zoo1:
        image: zookeeper:3.4.9
        container_name: zookeeper
        restart: on-failure
        hostname: zoo1
        ports:
          - "2181:2181"
        environment:
          ZOO_MY_ID: 1
          ZOO_PORT: 2181
          ZOO_SERVERS: server.1=zoo1:2888:3888
        volumes:
          - ./volumes/zookeeper_data:/data
          - ./volumes/zookeeper_datalog:/datalog
    
    kafka1:
        image: confluentinc/cp-kafka:5.5.0  
        container_name: kafka-broker1
        restart: on-failure
        hostname: kafka1
        ports:
            - "9092:9092"
        environment:
            KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
            KAFKA_BROKER_ID: 1
            KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        volumes:
            - ./volumes/kafka1_data:/var/lib/kafka/data
        depends_on:
            - zoo1
    
    kafka2:
        image: confluentinc/cp-kafka:5.5.0  
        container_name: kafka-broker2
        restart: on-failure
        hostname: kafka2
        ports:
            - "9094:9094"
        environment:
            KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
            KAFKA_BROKER_ID: 2
            KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        volumes:
            - ./volumes/kafka2_data:/var/lib/kafka/data
        depends_on:
            - zoo1

    kafka3:
        image: confluentinc/cp-kafka:5.5.0  
        container_name: kafka-broker3
        restart: on-failure
        hostname: kafka3
        ports:
            - "9096:9096"
        environment:
            KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9096
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
            KAFKA_BROKER_ID: 3
            KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        volumes:
            - ./volumes/kafka3_data:/var/lib/kafka/data
        depends_on:
            - zoo1
      
    
    # MONITORS
    kowl:
        image: quay.io/cloudhut/kowl:v1.4.0
        container_name: kowl
        restart: on-failure
        hostname: kowl
        volumes:
        - ./config.yaml:/etc/kowl/config.yaml
        ports:
        - "8080:8080"
        entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
        depends_on:
            - kafka1


    # postgres-exporter:
    #     image: quay.io/prometheuscommunity/postgres-exporter:latest
    #     container_name: postgres-exporter
    #     environment:
    #     - DATA_SOURCE_NAME=postgresql://admin:admin@postgres:5432/postgres?sslmode=disable
    #     ports:
    #     - 9187:9187
    #     networks:
    #     - local-net

    # prometheus:
    #     image: prom/prometheus:latest
    #     container_name: prometheus
    #     restart: on-failure
    #     volumes:
    #     - ./volumes/prometheus-data:/prometheus-data
    #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
    #     ports:
    #     - 9090:9090
    #     networks:
    #     - local-net
    #     # depends_on:
    #     # - cadvisor

    # grafana:
    #     image: grafana/grafana:latest
    #     container_name: grafana
    #     restart: on-failure
    #     environment:
    #         - GF_SERVER_ROOT_URL=http://127.0.0.1:3000
    #         - GF_SECURITY_ADMIN_PASSWORD=admin
    #     ports:
    #         - 3000:3000
    #     networks:
    #         - local-net
    #     external_links:
    #         - local-net

#     portainer:
#         image: portainer/portainer:latest
#         container_name: portainer
#         command: -H unix:///var/run/docker.sock
#         restart: always
#         ports:
#             - 9000:9000
#             - 8000:8000
#         volumes:
#             - /var/run/docker.sock:/var/run/docker.sock
# #            - /volumes/portainer_data:/data
#         networks:
#             - local-net
        

    
    # cadvisor:
    #      image: gcr.io/cadvisor/cadvisor:latest
    #      container_name: cadvisor
    #      ports:
    #      - 2000:8080
    #      volumes:
    #      - /:/rootfs:ro
    #      - /var/run:/var/run:rw
    #      - /sys:/sys:ro
    #      - /var/lib/docker/:/var/lib/docker:ro
    #      depends_on:
    #      - redis
    # redis:
    #      image: redis:latest
    #      container_name: redis
    #      ports:
    #      - 6379:6379


networks:
    local-net:
        external: true

volumes:
    portainer_data: